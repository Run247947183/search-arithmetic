class point {
    public int col;
    public int row;
    public point(int col, int row) {
        this.col = col;
        this.row = row;
    }
}

class Solution {
    // 广度优先搜索
    // 题目意思可以理解为求陆地感染海洋区域的最大次数
    public int maxDistance(int[][] grid) {
        Queue<point> queue = new LinkedList<>();
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid.length; j++) {
                if (grid[i][j] == 1) {
                    queue.offer(new point(i, j));
                }
            }
        }
        if (queue.size() == 0 || queue.size() == (grid.length * grid.length)) {
            return -1;
        }
        int step = 0;
        int[][] tag = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        while (!queue.isEmpty()) {
            int size = queue.size();
            while (size > 0) {
                size--;
                point p = queue.poll();
                for (int i = 0; i < 4; i++) {
                    int col = p.col + tag[i][0];
                    int row = p.row + tag[i][1];
                    if (col >= grid.length || row >= grid.length || col < 0 || row < 0) {
                        continue;
                    }
                    if (grid[col][row] == 0) {
                        grid[col][row] = 1;
                        queue.offer(new point(col, row));
                    }
                }
            }
            step++;
        }
        return step - 1;
    }
}

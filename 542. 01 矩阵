# search-arithmetic
搜索算法
class Point {
    public int x;
    public int y;
    public Point(int y, int x) {
        this.x = x;
        this.y = y;
    }
}
class Solution {
    // 广度优先搜索算法
    // 主体思想，先将原数组中元素为 0 的加入队列当中，由 0 的位置去寻找周围 1 的位置
    public int[][] updateMatrix(int[][] matrix) {
        int row = matrix.length;
        int col = matrix[0].length;
        Queue<Point> queue = new LinkedList<>();
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (matrix[i][j] == 0) {
                    queue.offer(new Point(i, j));
                } else {
                    // 改为 -1，是因为如果将该位置的距离改成 1 ，那么就会和原来的 1 分辨不出来，所以替换一下
                    matrix[i][j] = -1;
                }
            }
        }
        int[][] pos = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                Point p = queue.poll();
                for (int j = 0; j < 4; j++) {
                    int newX = p.x + pos[j][0];
                    int newY = p.y + pos[j][1];
                    if (newX < 0 || newY < 0 || newX >= matrix[0].length || newY >= matrix.length) {
                        continue;
                    }
                    if (matrix[newY][newX] == -1) {
                        matrix[newY][newX] = matrix[p.y][p.x] + 1;
                        // 将该位置也加入队列末尾
                        // 注意：只有当 0 的位置从队列中遍历完了后
                        // 才会轮到 (newY,newX)
                        queue.offer(new Point(newY, newX));
                    }
                }
            }
        }
        return matrix;
    }
}

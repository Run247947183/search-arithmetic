# search-arithmetic
搜索算法
class Solution {
    // 深度优先搜索算法
    // 注意：重点是在要去重，防止重复的添加已经存在的子序列
    // 通过在每一次 dfs 深度遍历时建立一个 HashSet ，来判断之后的元素是不是已经存在
    public List<List<Integer>> res = new ArrayList<>();
    public List<List<Integer>> findSubsequences(int[] nums) {
        if (nums == null || nums.length == 0) {
            return res;
        }
        dfs(nums, new ArrayList<>(), 0);
        return res;
    }
    public void dfs(int[] nums, List<Integer> list, int pos) {
        if (list.size() >= 2) {
            res.add(new ArrayList<>(list));
        }
        // 注意是本轮 dfs 的 set，和之前的 set 不同
        // 为了在回溯回来时能被继续往下遍历时，判断目前的元素，之前是否已经添加过了
        Set<Integer> set = new HashSet<>();
        for (int i = pos; i < nums.length; i++) {
            if (set.contains(nums[i])) {
                continue;
            }
            set.add(nums[i]);
            if (pos == 0 || nums[pos - 1] <= nums[i]) {
                list.add(nums[i]);
                dfs(nums, list, i + 1);
                list.remove(list.size() - 1);
            }
        }
    }
}

方法一
class Solution {
    // 广度优先搜索算法
    // 观察题目的特殊含义，二维数组的长度就为总共的人数，并且 i == j 时，一定为1
    // 因为自己和自己肯定组成一个朋友圈，并且 M[0][1] == 1 和 M[1][0] == 1 是一样的
    // 只需要判断这个几个人之间有哪些人组成一个共同的朋友圈即可
    public int findCircleNum(int[][] M) {
        int[] res = new int[M.length]; // 标记数组
        Queue<Integer> queue = new LinkedList<>();
        int count = 0;
        for (int i = 0; i < M.length; i++) {
            if (res[i] == 0) {
                // res[i] == 0 表示还没有从这个起点往下搜索过
                queue.offer(i);
                while (!queue.isEmpty()) {
                    int cur = queue.poll();
                    // 每次有新人加入朋友圈，要把标记数组更改，否则会重复
                    res[cur] = 1;
                    for (int j = 0; j < M.length; j++) {
                        if (M[cur][j] == 1 && res[j] == 0) {
                            queue.offer(j);
                        }
                    }
                }
                // 注意次数要在 while 循环后 + 1
                // 因为 while 循环内的查询结果都算是一个朋友圈的
                count++;
            }
        }
        return count;
    }
}

方法二：
class Solution {
    // 深度优先搜索算法
    // M.length 就是总共的人数，并且 i == j 表示自己是一个朋友圈
    // 那么就通过一个标记数组 tag 来辅助完成判断
    // 从每个人的位置开始搜索 
    public int findCircleNum(int[][] M) {
        int[] tag = new int[M.length];
        int count = 0;
        // 从每个人的位置开始搜索
        for (int i = 0; i < M.length; i++) {
            // 该位置为 0 ，表示没有加入其他朋友圈，所以需要从次开始递归搜索
            if (tag[i] == 0) {
                dfs(M, tag, i);
                // 每次进入这个 If 语句，表示开启一次新朋友圈的搜索
                // 所以需要在朋友圈总数上 + 1
                count++;
            }
        }
        return count;
    }
    public void dfs(int[][] M, int[] tag, int pos) {
        for (int i = 0; i < M.length; i++) {
            if (M[pos][i] == 1 && tag[i] == 0) {
                tag[i] = 1; // 更新标记
                dfs(M, tag, i); // 继续往下搜索
            }
        }
    }
}

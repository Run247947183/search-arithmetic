# search-arithmetic
搜索算法
class Solution {
    // 深度优先搜索算法 + 剪枝
    // 通过 books 数组记录是否已经访问过该位置
    // 如果之前访问过，说明这条路走不通，就不需要再次验证
    public List<List<Integer>> pathWithObstacles(int[][] obstacleGrid) {
        List<List<Integer>> res = new ArrayList<>();
        boolean[][] books = new boolean[obstacleGrid.length][obstacleGrid[0].length];
        dfs(obstacleGrid, 0, 0, res, books);
        return res;
    }
    // 注意此处需要返回 boolean 类型
    public boolean dfs(int[][] arr, int y, int x, List<List<Integer>> res, boolean[][]books) {
        if (y >= arr.length||x >= arr[0].length||arr[y][x] == 1||books[y][x]) {
            return false;
        }
        books[y][x] = true;
        List<Integer> list = new ArrayList<>();
        list.add(y);
        list.add(x);
        res.add(list);
        if ((y == arr.length - 1) && (x == arr[0].length - 1)) {
            return true;
        }
        // 这个 if 语句中如果有一个为 true ，那么就走这条路
        // 当它走不通时，会remove掉加入 res 的元素，然后走另外一条
        if (dfs(arr, y + 1, x, res, books) || dfs(arr, y, x + 1, res, books)) {
            return true;
        }
        res.remove(res.size() - 1);
        return false;
    }
}

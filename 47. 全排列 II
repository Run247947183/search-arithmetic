# search-arithmetic
搜索算法
class Solution {
    // 深度优先搜索算法
    // 主要注意：减枝来避免重复的排序
    // 先对数组进行排序是关键，因为这样就可以判断前一个数和当前数字是否相同
    // 相同的话就进行过滤
    public List<List<Integer>> res = new ArrayList<>();
    public List<List<Integer>> permuteUnique(int[] nums) {
        if (nums == null || nums.length == 0) {
            return res;
        }
        Arrays.sort(nums);
        int[] books = new int[nums.length];
        List<Integer> list = new ArrayList<>();
        dfs(nums, list, books);
        return res;
    }
    public void dfs(int[] nums, List<Integer> list, int[] books) {
        if (list.size() == nums.length) {
            res.add(new ArrayList<>(list));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            // 减枝
            if (i != 0 && nums[i - 1] == nums[i] && books[i - 1] == 0) {
                continue;
            }
            if (books[i] == 0) {
                books[i] = -1;
                list.add(nums[i]);
                dfs(nums, list, books);
                books[i] = 0;
                list.remove(list.size() - 1);
            }
        }
    }
}

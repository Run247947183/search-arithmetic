class Solution {
    // 深度优先搜索算法
    public int[][] tag = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
    public boolean exist(char[][] board, String word) {
        if (word == null || word.length() == 0) {
            return false;
        } 
        boolean[][] books = new boolean[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (dfs(board, word, books, i, j, 0)) {
                    return true;
                }
            }
        }
        return false;
    }
    public boolean dfs(char[][] board, String word, boolean[][] books,
    int x, int y, int index) {
        if (index == word.length() - 1) {
            return word.charAt(index) == board[x][y];
        }
        if (board[x][y] == word.charAt(index)) {
            books[x][y] = true;
            for (int i = 0; i < 4; i++) {
                int newX = x + tag[i][0];
                int newY = y + tag[i][1];
                if (newX >= board.length || newY >= board[0].length 
                || newX < 0 || newY < 0) {
                    continue;
                }
                if (!books[newX][newY]) {
                    if (dfs(board, word, books, newX, newY, index + 1)) {
                        return true;
                    }
                }
            }
        }
        books[x][y] = false;
        return false;
    }
}

// 方法二：也是深度优先搜索算法，只不过形式不同
class Solution {
    public boolean exist(char[][] board, String word) {
        int[][] books = new int[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (dfs(board, word, 0, books, j, i)) {
                    return true;
                }
            }
        }
        return false;
    }
    public boolean dfs(char[][] board, String word, int pos, int[][] books, int x, int y) {
        if (x >= board[0].length || y >= board.length || x < 0 || y < 0 || books[y][x] == -1) {
            return false;
        }
        if (pos == word.length() - 1) {
            return board[y][x] == word.charAt(pos);
        }
        books[y][x] = -1;
        boolean tag = false;
        if (board[y][x] == word.charAt(pos)) {
            tag = dfs(board, word, pos + 1, books, x + 1, y) ||
            dfs(board, word, pos + 1, books, x, y + 1) ||
            dfs(board, word, pos + 1, books, x - 1, y) ||
            dfs(board, word, pos + 1, books, x, y - 1);
        }
        // 此处注意：如果 tag 为 true ，表明 books[y][x] 位置已经被使用
        if (tag) {
            return true;
        } else {
            // 否则表示该位置不适合，就需要将 books[y][x] 改为 0
            // 改回原来的状态，以便另一个位置重新检测
            books[y][x] = 0;
            return false;
        }
    }
}
